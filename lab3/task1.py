# Определяем класс Order
class Order:
    # Атрибут класса: считает общее количество созданных заказов
    orders_quantity = 0

    # Конструктор класса: вызывается при создании нового объекта Order
    def __init__(self):
        # Увеличиваем счётчик заказов на 1 при создании нового объекта
        Order.orders_quantity += 1

        # Атрибут экземпляра: словарь для хранения товаров и их цен
        # Ключ — название товара (строка), значение — цена (число)
        self.items = {}

    # Метод добавления товара в заказ
    def add_item(self, item, price):
        # Проверяем, что цена — положительное число
        if price <= 0:
            print("Ошибка: цена должна быть положительной!")
            return self.items  # Возвращаем текущий список без изменений

        # Добавляем или обновляем товар в словаре items
        self.items[item] = price

        # Выводим сообщение об успешном добавлении (опционально, для наглядности)
        print(f"Товар '{item}' добавлен с ценой {price}")

        # Возвращаем текущий словарь товаров
        return self.items

    # Метод удаления товара из заказа с подтверждением
    def remove_item(self, item):
        # Проверяем, есть ли такой товар в заказе
        if item not in self.items:
            print(f"Ошибка: товар '{item}' не найден в заказе.")
            return self.items  # Возвращаем без изменений

        # Запрашиваем подтверждение у пользователя
        # input() возвращает строку, поэтому приводим к нижнему регистру и сравниваем
        confirmation = input(f"Вы уверены, что хотите удалить '{item}'? (да/нет): ").strip().lower()

        # Если пользователь подтвердил удаление
        if confirmation == "да":
            # Удаляем товар из словаря
            del self.items[item]
            print(f"Товар '{item}' успешно удалён.")
        else:
            # Если не подтвердил — просто сообщаем об отмене
            print("Удаление отменено.")

        # В любом случае возвращаем текущий словарь товаров
        return self.items

    # Метод подсчёта общей стоимости заказа
    def get_total(self):
        # Суммируем все значения (цены) в словаре items
        total = sum(self.items.values())
        return total
